---
description: Global rules.
globs: *
alwaysApply: true
---
# Execution Plan

## General
- If I corrected you something, and you feel that could be useful for future development, make sur eyou store it in the rules directory in the rigth file.

## Big Task
- For a big task, you should follow 4 steps:
  - Research: including thinking and researching existing code to understand what needs to be done and how to do it. This might be an iterative process that you have to do research multiple rounds
  - Plan: take the research result, plan the task, and document it in a task list file
  - Execution: implement the changes that are planned
  - Review: at the end of the execution, review changes, fix lint errors, and fix build
- Always keep an up-to-date task list file (such as task.md) in your project.
- After completing a significant component or task, update the task list by marking completed tasks with [x] and incomplete ones with [ ].
- Add any new tasks discovered during implementation to the list.
- Maintain a "Relevant Files" section with accurate file paths and descriptions.
- Document implementation details, especially for complex features.
- When starting a new task, check the task list to determine what to implement next.
- Move tasks between sections as their status changes, ensuring the documentation always reflects the current state of development.
- Use the command @task-lists in Cursor chat or the command palette to attach this rule and keep the AI focused on the plan.

# Code Conventions and Best Practices

## TypeScript Conventions

### Type Definitions
- Use interfaces for complex object types
- Prefer explicit typing, never use `any`
- Use nullable types with `| null` when appropriate
- Document complex interfaces with JSDoc comments

### Function Documentation
- All public functions must have JSDoc comments
- Functions longer than 40 lines require detailed documentation
- Document parameters using `@param` tags
- Document return types using `@returns` tags

### Error Handling
- Use try-catch blocks for async operations
- Extract error messages properly from Error objects
- Log errors with appropriate context

## Project Setup
- Use `pnpm` as the package manager
- Use Node.js version 22.4.0 (`nvm use 22.4.0`)
- use vercel's AI package for LLM requests.
- Always use trpc and trpc hooks for backend / frontend communication

## Logging
- Format log messages inline instead of using object notation
- Example: ❌ `logger.info("message", {data})`
- Example: ✅ `logger.info(\`message with ${formattedData}\`)`
- Include relevant context in log messages (IDs, counts, etc.)
- Logger is for bbackend only, frontend should not use it.

## Environment and Configuration
- Use environment variables through the `env` module
- Keep sensitive information like API keys in environment variables
- Reference environment variables through strongly typed interfaces

## Build
- When I ask you to fix build errors, make sure you run `nvm use 22.4.0 && pnpm build`, fix errors, iterate, until the build passes.
