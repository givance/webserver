'use client';

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Mail, Database } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { toast } from 'sonner';
import { trpc } from '@/app/lib/trpc/client';
import React from 'react';
import { Textarea } from '@/components/ui/textarea';
import { GmailConnect as GmailConnectComponent } from '@/components/ui/GmailConnect';
import { CrmIntegrationCard } from '@/components/integrations/CrmIntegrationCard';

function GmailConnect() {
  return <GmailConnectComponent context="settings" />;
}

function SignatureSettings() {
  const { data: user, refetch: refetchUser } = trpc.users.getCurrent.useQuery();
  const [signature, setSignature] = React.useState('');
  const [isSaving, setIsSaving] = React.useState(false);

  React.useEffect(() => {
    if (user?.emailSignature) {
      setSignature(user.emailSignature);
    }
  }, [user?.emailSignature]);

  const updateSignatureMutation = trpc.users.updateEmailSignature.useMutation({
    onSuccess: () => {
      toast.success('Email signature updated successfully');
      refetchUser();
      setIsSaving(false);
    },
    onError: (error) => {
      toast.error(error.message || 'Failed to update email signature');
      setIsSaving(false);
    },
  });

  const handleSave = () => {
    setIsSaving(true);
    updateSignatureMutation.mutate({ signature });
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Email Signature</CardTitle>
        <CardDescription>
          Set your default email signature that will be included in AI-generated emails.
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="space-y-2">
          <label htmlFor="signature" className="text-sm font-medium">
            Signature
          </label>
          <Textarea
            id="signature"
            placeholder="Best regards,&#10;Your Name&#10;Your Title&#10;Your Organization"
            value={signature}
            onChange={(e) => setSignature(e.target.value)}
            rows={4}
          />
          <p className="text-sm text-muted-foreground">
            This signature will be automatically added to emails generated by the AI system.
          </p>
        </div>
        <Button onClick={handleSave} disabled={isSaving || updateSignatureMutation.isPending}>
          {isSaving || updateSignatureMutation.isPending ? 'Saving...' : 'Save Signature'}
        </Button>
      </CardContent>
    </Card>
  );
}

export default function IntegrationsPage() {
  const { data: providers, isLoading } = trpc.integrations.getAvailableProviders.useQuery();

  return (
    <>
      <title>Integrations - Settings</title>
      <div className="container mx-auto px-6 py-6">
        <div className="flex items-center gap-3 mb-6">
          <Database className="h-6 w-6" />
          <h1 className="text-2xl font-bold">Integrations</h1>
        </div>

        <div className="space-y-8">
          {/* CRM Integrations Section */}
          <div>
            <h3 className="text-lg font-medium mb-4 flex items-center gap-2">
              <Database className="h-5 w-5" />
              CRM Integrations
            </h3>
            <div className="grid gap-4 md:grid-cols-2">
              {!isLoading &&
                providers?.map((provider) => (
                  <CrmIntegrationCard key={provider.name} provider={provider} />
                ))}
            </div>
          </div>

          {/* Email Integration Section */}
          <div>
            <h3 className="text-lg font-medium mb-4 flex items-center gap-2">
              <Mail className="h-5 w-5" />
              Email Integration
            </h3>
            <div className="grid gap-4">
              <GmailConnect />
            </div>
          </div>

          {/* <SignatureSettings /> */}
        </div>
      </div>
    </>
  );
}
